{"version":3,"sources":["docker/DockerControl.tsx","DockerInstanceTable.tsx","dialog/PruneConfirmation.tsx","dialog/SpawnDialog.tsx","dialog/BenchmarkDialog.tsx","FooterComponent.tsx","ApplyBenchmarkControl.tsx","labchainSDK/Crypto.ts","labchainSDK/Account.ts","labchainSDK/Transaction.ts","labchainSDK/Client.ts","docker/DockerInterface.ts","StatChart.tsx","docker/BenchmarkEngine.ts","App.tsx","network/ConnectivityView.tsx","serviceWorker.ts","benchmark/BenchmarkTable.tsx","benchmark/BenchmarkBatchTable.tsx","benchmark/BenchmarkView.tsx","index.tsx"],"names":["DockerControl","props","instance","status","react_default","a","createElement","className","onClick","e","stopInstance","name","startInstance","deleteInstance","DockerInstanceTable","rows","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","stop","_x","apply","this","arguments","_ref2","_callee2","_context2","_x2","_ref3","_callee3","_context3","_x3","instances","map","inst","i","push","key","id","substring","port","pruneDialogStyle","content","top","left","right","bottom","marginRight","transform","PruneConfirmation","lib_default","isOpen","show","contentLabel","style","cancel","ok","Modal","setAppElement","width","SpawnNetworkDialog","count","type","onChange","target","value","BenchmarkDialog","_useState","useState","_useState2","slicedToArray","selectedReceiver","setSelectedReceiver","_useState3","_useState4","filename","setFilename","_useState5","_useState6","nodecount","setNodecount","_useState7","_useState8","configureNetwork","setConfigureNetwork","errorMessage","length","role","evt","dockerInstances","x","label","react_select_browser_esm","_sel","isMulti","options","FooterComponent","react_router_dom","to","ApplyBenchmarkControl","send10Transactions","clicked","send100Transactions","send1000Transactions","send10000Transactions","_ref4","_callee4","_context4","send100000Transactions","_ref5","_callee5","_context5","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","title","Crypto","classCallCheck","createClass","eck","payload","sha256","pem","private_key","createSign","update","sign","public_key","signature","createVerify","verify","Account","keyPair","keyFromPEM","generateKeyPair","tx","asPublicECKey","priv_key","getPublicKey","toString","btoa","ac","Transaction","sender","receiver","_payload","getPublicKeyPEMBase64","privatekey","String","toBCRepresentation","publickey","_signature","Error","ret","LabchainClient","url","rpc_id_count","_getConnectedPeers","abrupt","sendJSONRPC","_getBlock","n","_this","Promise","resolve","reject","then","blocks","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","undefined","_step2","_iterator2","Symbol","iterator","done","block","transactions","tr","timestamp","Date","err","return","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","_sendTransaction","toTransmittableString","tx_hash","_this2","getBlock","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","filter","hash","method","params","_this3","data","jsonrpc","fetch","body","JSON","stringify","res","json","res2","result","catch","error","DockerInterface","split","getInstances","clients","client","_getInstances","response","json_resp","sent","_createInstance","_startInstance","_stopInstance","_deleteInstance","_spawnNetwork","_callee6","_context6","_x4","_pruneNetwork","_callee7","_context7","_benchmarkSimple","_callee8","benchmarkName","transaction_count","peers","_context8","benchmark_name","n_transactions","headers","Content-Type","text","t","_x5","_x6","_x7","_x8","_getBenchmarkFiles","_callee9","files","_context9","_getBenchmarkQueue","_callee10","benchmarks","_context10","_getBenchmarkStatus","_callee11","_context11","_dumpBenchmarkData","_callee12","_context12","StateChart","possibleConstructorReturn","getPrototypeOf","call","_isMounted","timer","state","current_miner","current_block","current_difficulty","getClientInterface","intf","setInterval","tick","setState","creator","nr","difficulty","clearInterval","React","Component","BenchmarkEngine","_receiver","_filename","_nodecount","benchmarkSimple","App","setDockerInstances","showPruneConfirmation","setShowPruneConfirmation","showSpawnDialog","setShowSpawnDialog","showBenchmarkDialog","setShowBenchmarkDialog","_useState9","_useState10","benchmarkId","setBenchmarkId","_useState11","_useState12","benchmarkDialogErrorMessage","setBenchmarkDialogErrorMessage","noteColor","background","useEffect","createNewDockerInstance","createInstance","notify","pruneNetwork","pruneNetworkDialog","_ref6","spawnNetworkDialog","_ref7","spawnNetwork","_ref8","StatChart_StateChart","console","log","b","bc","benchmarkSimpleTransactions","notify_default","benchmarkType","FooterComponent_FooterComponent","ConnectivityView","timerID","graphConfig","nodeHighlightBehavior","height","node","color","size","highlightStrokeColor","link","highlightColor","nodes","links","ip","ipv4","startsWith","_data","newData","d","peer","slice","keys","d2","getNameByIP","d3","source","flat","_this4","getPeersProms","getClientInterfaces","clientInterfaces","forEach","clientI","getConnectedPeers","all","peerData","renderGraph","react_d3_graph_lib","config","Boolean","window","location","hostname","match","BenchmarkTable","file","BenchmarkBatchTable","BenchmarkView","benchmarkQueue","benchmarkStatus","remaining_txs","found_txs","total_txs","getBenchmarkFiles","_files","getBenchmarkStatus","_status","getBenchmarkQueue","_queue","dumpBenchmarkData","routing","react_router","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.152037d3.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function DockerControl(props: any) {\n\n    return (\n        props.instance.status === 'running' ? <button className=\"btn btn-dark\" onClick={(e) => { props.stopInstance(props.instance.name) }}>Stop</button> : <span><button className=\"btn btn-dark\" onClick={(e) => { props.startInstance(props.instance.name) }}>Start</button> <button className=\"btn btn-dark\" onClick={(e) => { props.deleteInstance(props.instance.name) }}>Delete</button></span>\n    )\n}\n","import React from 'react'\nimport DockerControl from './docker/DockerControl'\n\nexport default function DockerInstanceTable(props: any) {\n    let rows: any[] = []\n\n    let stopInstance = async function(name: string) {\n        props.stopInstance(name)\n    }\n\n    let startInstance = async function(name: string) {\n        props.startInstance(name)\n    }\n\n    let deleteInstance = async function(name: string) {\n        props.deleteInstance(name)\n    }\n\n    // eslint-disable-next-line\n    props.instances.map((inst: any, i: number) => {\n        rows.push(<tr key={inst.name}><td>{i + 1}</td><td>{inst.id.substring(0, 10)}...</td><td>{inst.name}</td><td>{inst.status}</td><td>{inst.port}</td><td>\n            <DockerControl instance={inst} stopInstance={stopInstance} startInstance={startInstance} deleteInstance={deleteInstance}></DockerControl>\n        </td></tr>)\n    })\n\n    return (\n        <table className=\"table table-striped\">\n            <thead>\n                <tr>\n                    <th>#</th>\n                    <th>ID</th>\n                    <th>Name</th>\n                    <th>Status</th>\n                    <th>Ports</th>\n                    <th>Action</th>\n                </tr>\n            </thead>\n            <tbody>{rows}</tbody>\n        </table>\n    )\n}\n","import React from 'react'\nimport Modal from 'react-modal'\n\nconst pruneDialogStyle = {\n    content: {\n        top: '50%',\n        left: '50%',\n        right: 'auto',\n        bottom: 'auto',\n        marginRight: '-50%',\n        transform: 'translate(-50%, -50%)'\n    }\n}\n\nexport default function PruneConfirmation(props: any) {\n\n    return (\n        <Modal isOpen={props.show} contentLabel=\"Prune Network\" style={pruneDialogStyle}>\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <h2>Prune Network</h2>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <h4>Are you sure?</h4>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <button className=\"btn btn-secondary\" onClick={props.cancel}>Cancel</button>\n                    </div>\n                    <div className=\"col-md-6 text-right\">\n                        <button className=\"btn btn-primary\" onClick={props.ok}>Ok</button>\n                    </div>\n                </div>\n            </div>\n        </Modal>\n    )\n}\n\nModal.setAppElement('#root')\n","import React from 'react'\nimport Modal from 'react-modal'\n\nconst pruneDialogStyle = {\n    content: {\n        top: '50%',\n        left: '50%',\n        right: 'auto',\n        bottom: 'auto',\n        width: '500px',\n        marginRight: '-50%',\n        transform: 'translate(-50%, -50%)'\n    }\n}\n\nexport default function SpawnNetworkDialog(props: any) {\n\n    let count = 3\n\n    return (\n        <Modal isOpen={props.show} contentLabel=\"Spawn Network\" style={pruneDialogStyle}>\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <h2>Spawn Network</h2>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-4\">\n                        <h4>Nodecount:</h4>\n                    </div>\n                    <div className=\"col-md-8\">\n                        <input type=\"text\" onChange={(e) => { count = +e.target.value }} />\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <button className=\"btn btn-secondary\" onClick={props.cancel}>Cancel</button>\n                    </div>\n                    <div className=\"col-md-6 text-right\">\n                        <button className=\"btn btn-primary\" onClick={() => { props.ok(count) }}>Ok</button>\n                    </div>\n                </div>\n            </div>\n        </Modal>\n    )\n}\n\nModal.setAppElement('#root')\n","import React, { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { DockerInstance } from \"../docker/DockerInterface\";\nimport Select from \"react-select\";\n\nconst pruneDialogStyle = {\n    content: {\n        top: \"50%\",\n        left: \"50%\",\n        right: \"auto\",\n        bottom: \"auto\",\n        marginRight: \"-50%\",\n        transform: \"translate(-50%, -50%)\"\n    }\n};\n\nexport default function BenchmarkDialog(props: any) {\n    const [selectedReceiver, setSelectedReceiver] = useState<DockerInstance[]>([]);\n    const [filename, setFilename] = useState<string>(\"testData\");\n    const [nodecount, setNodecount] = useState<number>(-1);\n    const [configureNetwork, setConfigureNetwork] = useState<boolean>(false);\n\n    let handleReceiverChange = function(_sel: any) {\n        setSelectedReceiver(_sel);\n    };\n\n    let selectAllReceivers = function() {\n        setSelectedReceiver(\n            props.dockerInstances.map(function(x: DockerInstance) {\n                return { label: x.name, value: x };\n            })\n        );\n    };\n\n    let deselectAllReceivers = function() {\n        setSelectedReceiver([]);\n    };\n\n    let handleFilenameChange = function(evt: any) {\n        setFilename(evt.target.value);\n    };\n\n    let handleNodecountChange = function(evt: any) {\n        setNodecount(+evt.target.value);\n    };\n\n    let toggleControlNetwork = function() {\n        setConfigureNetwork(!configureNetwork);\n    };\n\n    return (\n        <Modal isOpen={props.show} contentLabel=\"Benchmark Configuration\" style={pruneDialogStyle}>\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <h2>Benchmark Configuration</h2>\n                    </div>\n                </div>\n                {props.errorMessage.length > 0 && (\n                    <div className=\"row\">\n                        <div className=\"col-md-12\">\n                            <div className=\"alert alert-danger\" role=\"alert\">\n                                {props.errorMessage}\n                            </div>\n                        </div>\n                    </div>\n                )}\n                <div className=\"row\">\n                    <div className=\"col-md-2\">\n                        <h4>Filename:</h4>\n                    </div>\n                    <div className=\"col-md-10\">\n                        <input type=\"text\" name=\"filename\" value={filename} onChange={handleFilenameChange} />\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <div className=\"form-check\">\n                            <input type=\"checkbox\" className=\"from-check-input\" onChange={toggleControlNetwork} id=\"configureNetwork\" />\n                            <label className=\"form-check-label\">Configure Network for benchmark</label>\n                        </div>\n                    </div>\n                </div>\n                {configureNetwork && (\n                    <div className=\"row\">\n                        <div className=\"col-md-12\">\n                            <div className=\"card\">\n                                <div className=\"card-header\">Network Configuration</div>\n                                <div className=\"card-body\">\n                                    <div className=\"container\">\n                                        <div className=\"row\">\n                                            <div className=\"col-md-12\">\n                                                <p className=\"card-text\">\n                                                    Configure the network for the benchmark. Note that the transactions are transmitted to all the configured\n                                                    peers in equal parts.\n                                                </p>\n                                            </div>\n                                        </div>\n                                        <div className=\"row\">\n                                            <div className=\"col-md-4\">Define the number of nodes to create:</div>\n                                            <div className=\"col-md-8\">\n                                                <input type=\"text\" name=\"nodecount\" value={nodecount} onChange={handleNodecountChange} />\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n                {!configureNetwork && (\n                    <div className=\"row\">\n                        <div className=\"col-md-12\">\n                            <h4>Select the receiving nodes:</h4>\n                        </div>\n                    </div>\n                )}\n                {!configureNetwork && (\n                    <div className=\"row\">\n                        <div className=\"col-md-8\">The send transactions will be evenly distributed between the selected nodes.</div>\n                        <div className=\"col-md-2\">\n                            <button className=\"btn btn-secondary\" onClick={selectAllReceivers}>\n                                Select all\n                            </button>\n                        </div>\n                        <div className=\"col-md-2\">\n                            <button className=\"btn btn-secondary\" onClick={deselectAllReceivers}>\n                                Deselect all\n                            </button>\n                        </div>\n                    </div>\n                )}\n                {!configureNetwork && (\n                    <div className=\"row\">\n                        <div className=\"col-md-12\">\n                            <Select\n                                value={selectedReceiver}\n                                onChange={handleReceiverChange}\n                                isMulti={true}\n                                options={props.dockerInstances.map(function(x: DockerInstance) {\n                                    return { label: x.name, value: x };\n                                })}\n                            />\n                        </div>\n                    </div>\n                )}\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <button className=\"btn btn-secondary\" onClick={props.cancel}>\n                            Cancel\n                        </button>\n                    </div>\n                    <div className=\"col-md-6 text-right\">\n                        <button\n                            className=\"btn btn-primary\"\n                            onClick={() => {\n                                props.ok(selectedReceiver.map(x => (x as any).value), filename, nodecount);\n                            }}\n                        >\n                            Ok\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </Modal>\n    );\n}\n\nModal.setAppElement(\"#root\");\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"./FooterComponent.css\";\n\nexport default function FooterComponent() {\n    return (\n        <footer className=\"page-footer footer navbar-fixed-bottom\">\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-md-1\">\n                        <Link to=\"/\">Main</Link>\n                    </div>\n                    <div className=\"col-md-1\">\n                        <Link to=\"/network\">Network</Link>\n                    </div>\n                    <div className=\"col-md-1\">\n                        <Link to=\"/benchmarks\">Benchmarks</Link>\n                    </div>\n                </div>\n            </div>\n        </footer>\n    );\n}\n","import React from \"react\";\n\nexport default function ApplyBenchmarkControl(props: any) {\n    let send10Transactions = async function() {\n        props.clicked(\"10Simple\");\n    };\n\n    let send100Transactions = async function() {\n        props.clicked(\"100Simple\");\n    };\n\n    let send1000Transactions = async function() {\n        props.clicked(\"1000Simple\");\n    };\n\n    let send10000Transactions = async function() {\n        props.clicked(\"10000Simple\");\n    };\n\n    let send100000Transactions = async function() {\n        props.clicked(\"100000Simple\");\n    };\n\n    return (\n        <div className=\"dropdown\">\n            <button\n                className=\"btn btn-primary dropdown-toggle\"\n                type=\"button\"\n                id=\"dropdownMenuButton\"\n                data-toggle=\"dropdown\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"false\"\n            >\n                Apply benchmark...\n            </button>\n            <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                <button className=\"dropdown-item\" title=\"Send 10 tranasctions to the blockchain network and measure the time\" onClick={send10Transactions}>\n                    10 Transactions\n                </button>\n                <button className=\"dropdown-item\" title=\"Send 100 tranasctions to the blockchain network and measure the time\" onClick={send100Transactions}>\n                    100 Transactions\n                </button>\n                <button className=\"dropdown-item\" title=\"Send 1,000 tranasctions to the blockchain network and measure the time\" onClick={send1000Transactions}>\n                    1,000 Transactions\n                </button>\n                <button\n                    className=\"dropdown-item\"\n                    title=\"Send 10,000 tranasctions to the blockchain network and measure the time\"\n                    onClick={send10000Transactions}\n                >\n                    10,000 Transactions\n                </button>\n                <button\n                    className=\"dropdown-item\"\n                    title=\"Send 100,000 tranasctions to the blockchain network and measure the time\"\n                    onClick={send100000Transactions}\n                >\n                    100,000 Transactions\n                </button>\n            </div>\n        </div>\n    );\n}\n","import * as eck from \"ec-key\";\nimport { sha256 } from \"js-sha256\";\n\n/**\n * Mock class because i am to lazy to type the ec-key package TODO!\n * */\nexport abstract class KeyObject {\n    abstract createSign(_type: string): any;\n    abstract createVerify(_type: string): any;\n    abstract asPublicECKey(): KeyObject;\n\n    abstract toString(_type: string): string;\n}\n\nexport abstract class Crypto {\n    /**\n     * Creates a public private keypair using the P-256 curve\n     */\n    public static generateKeyPair(): KeyObject {\n        return eck.createECKey(\"P-256\");\n    }\n\n    /**\n     * Computes the SHA256 has of the given string\n     * @param payload Provided as string\n     * @return Returns the hash\n     */\n    public static sha256(payload: string): string {\n        return sha256(payload);\n    }\n\n    /**\n     * Transforms a PEM given key into a <KeyObject>\n     * @param pem String PEM\n     * @return <KeyObject>\n     * */\n    public static keyFromPEM(pem: any): KeyObject {\n        return new eck(pem, \"pem\");\n    }\n\n    /**\n     * Signs the message with the given private key\n     * @param payload The payload to sign as string\n     *\n     */\n    public static sign(payload: string, private_key: KeyObject): string {\n        return private_key\n            .createSign(\"SHA256\")\n            .update(payload) // double hash!!!\n            .sign(\"base64\");\n    }\n\n    /**\n     * Verifies the signature\n     */\n    public static verify(payload: string, public_key: KeyObject, signature: string) {\n        return public_key\n            .createVerify(\"SHA256\")\n            .update(payload)\n            .verify(signature, \"base64\");\n    }\n}\n","import { Crypto, KeyObject } from \"./Crypto\";\nimport { Transaction } from \"./Transaction\";\n\nexport class Account {\n    keyPair: KeyObject;\n\n    /**\n     * Creates a new account with new private/ public key pair\n     * @param pem The PEM string from which the key can be extracted\n     * */\n    constructor(pem?: string) {\n        if (pem) {\n            this.keyPair = Crypto.keyFromPEM(pem);\n        } else {\n            this.keyPair = Crypto.generateKeyPair();\n        }\n    }\n\n    /**\n     * Creates a new account with new private/ public key pair\n     * @param pem The PEM string from which the key can be extracted\n     * @return Account Newly created account\n     * */\n    public static createAccount(pem?: string): Account {\n        let ac: Account = new Account();\n\n        if (pem) {\n            ac.keyPair = Crypto.keyFromPEM(pem);\n        } else {\n            ac.keyPair = Crypto.generateKeyPair();\n        }\n\n        return ac;\n    }\n\n    /**\n     * Returns the transaction signed with the private key of the current account\n     * @param tx Transaction to sign\n     * @return Signed transaction\n     * */\n    public signTransaction(tx: Transaction): Transaction {\n        tx.sign(this.keyPair);\n        return tx;\n    }\n\n    /**\n     * @return public key\n     * */\n    public getPublicKey(): KeyObject {\n        return this.keyPair.asPublicECKey();\n    }\n\n    /**\n     * @return public key in PEM format as base64 encoded string\n     * */\n    public getPublicKeyPEMBase64(): string {\n        let priv_key = this.getPublicKey().toString(\"pem\");\n        return btoa(priv_key);\n    }\n}\n","import { Crypto, KeyObject } from \"./Crypto\";\nimport { Account } from \"./Account\";\n\n/**\n * Represents a transaction in the blockchain\n * */\nexport class Transaction {\n    sender: Account | string = \"\";\n    receiver: Account | string = \"\";\n    payload: string = \"\";\n    signature: string = \"\";\n\n    /**\n     * @param sender The public key of the sender must be provided as <Account>\n     * @param receiver The public key of the receiver can be provided either as <Account> or as string in PEM format\n     * @param payload The payload of the transaction as string\n     * @param signature The signature of the transaction as string\n     * */\n    constructor(sender: Account | string, receiver: Account | string, payload: string, signature?: string) {\n        this.sender = sender;\n        this.receiver = receiver;\n        this.payload = payload;\n\n        if (!signature) {\n            this.signature = \"\";\n        } else {\n            this.signature = signature;\n        }\n    }\n\n    /**\n     * Private function that describes the structure of the data that is hashed, when\n     * we hasing a transaction\n     * */\n    private toBCRepresentation(): string {\n        let _payload: string = this.payload;\n\n        if (this.receiver instanceof Account) {\n            _payload += (this.receiver as Account).getPublicKeyPEMBase64();\n        } else {\n            _payload += this.receiver;\n        }\n\n        if (this.sender instanceof Account) {\n            _payload += (this.sender as Account).getPublicKeyPEMBase64();\n        } else {\n            _payload += this.sender;\n        }\n\n        return _payload;\n    }\n\n    /**\n     * Sign the transaction with the private key\n     * @param privatekey Can be the key in PEM format, as KeyObject or as <Account>\n     * */\n    sign(privatekey: KeyObject | string | Account) {\n        if (privatekey instanceof Account) {\n            privatekey = (privatekey as Account).keyPair;\n        } else if (typeof privatekey === \"string\" || privatekey instanceof String) {\n            privatekey = Crypto.keyFromPEM(privatekey);\n        }\n\n        this.signature = Crypto.sign(this.toBCRepresentation(), privatekey);\n    }\n\n    /**\n     * Verify the transaction with the public key\n     * @param publickey Can be the key in PEM format, as KeyObject or as <Account>\n     * @param _signature Provide the signature as string. If no signature is given it uses the transaction signature field. If no signature is available it throws an error.\n     * */\n    verify(publickey: Account | KeyObject | string, _signature?: string): Boolean {\n        if (publickey instanceof Account) {\n            publickey = (publickey as Account).getPublicKey();\n        } else if (typeof publickey === \"string\" || publickey instanceof String) {\n            publickey = Crypto.keyFromPEM(publickey);\n        }\n\n        if (_signature) this.signature = _signature;\n\n        if (!this.signature || \"\" === this.signature) {\n            throw Error(\"Transaction has no signature\");\n        }\n\n        return Crypto.verify(this.toBCRepresentation(), publickey, this.signature);\n    }\n\n    /**\n     * @returns a transmittable representation of the transaction\n     * */\n    toTransmittableString(): any {\n        let ret: any = { signature: this.signature, payload: this.payload };\n\n        if (this.sender instanceof Account) {\n            ret.sender = (this.sender as Account).getPublicKeyPEMBase64();\n        } else {\n            ret.sender = this.sender;\n        }\n\n        if (this.receiver instanceof Account) {\n            ret.receiver = (this.receiver as Account).getPublicKeyPEMBase64();\n        } else {\n            ret.receiver = this.receiver;\n        }\n\n        return ret;\n    }\n\n    hash(): string {\n        return Crypto.sha256(this.toBCRepresentation());\n    }\n}\n","import { Transaction } from \"./Transaction\";\n\nexport interface Block {\n    creator: string;\n    difficulty: number;\n    merkleHash: string | null;\n    nonce: number;\n    nr: number;\n    predecessorBlock: string;\n    timestamp: number;\n    transactions: Transaction[];\n}\n\nexport class LabchainClient {\n    url: string = \"\";\n    rpc_id_count: number = 0;\n    constructor(url: string) {\n        this.url = url;\n    }\n\n    /**\n     * Returns the connected peers of the node\n     * */\n    async getConnectedPeers(): Promise<string[]> {\n        if (\"\" === this.url) {\n            throw Error(\"Not connected to a node\");\n        }\n\n        return this.sendJSONRPC(\"getPeers\");\n    }\n\n    /**\n     * Returns the n'th block. If no number is given\n     * it returns the latest block\n     * */\n    async getBlock(n?: number): Promise<Block[]> {\n        return new Promise<Block[]>((resolve, reject) => {\n            if (!n) {\n                this.sendJSONRPC(\"requestBlock\").then(blocks => {\n                    for (let block of blocks) {\n                        block.transactions = block.transactions.map((tr: Transaction) => new Transaction(tr.sender, tr.receiver, tr.payload, tr.signature));\n                        block.timestamp = new Date((block as Block).timestamp * 1000);\n                    }\n                    resolve(blocks);\n                });\n            } else {\n                this.sendJSONRPC(\"requestBlock\", [n]).then(blocks => {\n                    for (let block of blocks) {\n                        block.transactions = block.transactions.map((tr: Transaction) => new Transaction(tr.sender, tr.receiver, tr.payload, tr.signature));\n                        block.timestamp = new Date((block as Block).timestamp * 1000);\n                    }\n                    resolve(blocks);\n                });\n            }\n        });\n    }\n\n    /**\n     * Sends a transaction to the node\n     * */\n    async sendTransaction(tx: Transaction): Promise<any> {\n        return this.sendJSONRPC(\"sendTransaction\", [tx.toTransmittableString()]);\n    }\n\n    /**\n     * Returns true, if the transaction was mined otherwise false\n     *\n     * This methods fails if two blocks are mined quickly after another.\n     * It only checks the  most recent block TODO\n     * */\n    isTransactionMined(tx_hash: string): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            this.getBlock().then(blocks => {\n                for (let block of blocks) {\n                    if (\n                        block.transactions.filter(function(a: Transaction) {\n                            return a.hash() === tx_hash;\n                        }).length > 0\n                    ) {\n                        resolve(true);\n                    }\n                }\n            });\n        });\n    }\n\n    sendJSONRPC(method: string, params?: any): Promise<any> {\n        if (\"\" === this.url) {\n            throw Error(\"Not connected to a node\");\n        }\n\n        let data: any = {\n            method: method,\n            jsonrpc: \"2.0\",\n            id: this.rpc_id_count\n        };\n\n        if (params) {\n            data.params = params;\n        }\n\n        return new Promise((resolve, reject) => {\n            fetch(this.url, {\n                method: \"POST\",\n                body: JSON.stringify(data)\n            })\n                .then(res => {\n                    res.json().then(res2 => {\n                        resolve(res2.result);\n                        ++this.rpc_id_count;\n                    });\n                })\n                .catch(error => {\n                    reject(error);\n                });\n        });\n    }\n}\n","import { LabchainClient } from \"../labchainSDK/Client\";\n\nexport interface BenchmarkStatus {\n    remaining_txs: number;\n    found_txs: number;\n    total_txs: number;\n    name: string;\n}\n\nexport interface DockerInstance {\n    id: string;\n    ipv4: string;\n    ipv6: string;\n    mac: string;\n    name: string;\n    status: string;\n    port: string[];\n}\n\nexport class DockerInterface {\n    public static url = \"http://localhost:8080\";\n\n    /**\n     * Returns a labchain client connected to an arbitrary docker instance, or if an\n     * instance is provided to this instance\n     * */\n    public static getClientInterface(instance?: DockerInstance): Promise<LabchainClient> {\n        if (instance) {\n            return new Promise<LabchainClient>((resolve, reject) => {\n                let id: number = +instance.name.split(\"_\")[1];\n                resolve(new LabchainClient(\"http://localhost:\" + (id + 5000)));\n            });\n        }\n        return new Promise<LabchainClient>((resolve, reject) => {\n            DockerInterface.getInstances().then(instances => {\n                if (instances.length === 0) {\n                    reject();\n                } else {\n                    let instance: DockerInstance = instances[0];\n                    let id: number = +instance.name.split(\"_\")[1];\n                    resolve(new LabchainClient(\"http://localhost:\" + (id + 5000)));\n                }\n            });\n        });\n    }\n\n    /**\n     * Returns the labchain interfaces to the running docker instances\n     * */\n    public static getClientInterfaces(): Promise<{ instance: DockerInstance; client: LabchainClient }[]> {\n        return new Promise<{ instance: DockerInstance; client: LabchainClient }[]>((resolve, reject) => {\n            let clients: { instance: DockerInstance; client: LabchainClient }[] = [];\n            DockerInterface.getInstances().then(instances => {\n                for (let inst of instances) {\n                    if (inst.status !== \"running\") continue;\n                    let id: number = +inst.name.split(\"_\")[1];\n\n                    let client: LabchainClient = new LabchainClient(\"http://localhost:\" + (id + 5000) + \"/\");\n\n                    clients.push({ instance: inst, client: client });\n                }\n\n                resolve(clients);\n            });\n        });\n    }\n\n    public static async getInstances(): Promise<DockerInstance[]> {\n        const response = await fetch(DockerInterface.url + \"/getInstances\");\n        const json_resp = await response.json();\n\n        return json_resp;\n    }\n\n    public static async createInstance(): Promise<DockerInstance[]> {\n        const response = await fetch(DockerInterface.url + \"/startInstance\");\n        const instances = await response.json();\n\n        return instances;\n    }\n\n    public static async startInstance(name: string): Promise<DockerInstance[]> {\n        const response = await fetch(DockerInterface.url + \"/startInstance?name=\" + name);\n        const instances = await response.json();\n\n        return instances;\n    }\n\n    public static async stopInstance(name: string): Promise<DockerInstance[]> {\n        const response = await fetch(DockerInterface.url + \"/stopInstance?name=\" + name);\n        const instances = await response.json();\n\n        return instances;\n    }\n\n    public static async deleteInstance(name: string): Promise<DockerInstance[]> {\n        const response = await fetch(DockerInterface.url + \"/deleteInstance?name=\" + name);\n        const instances = await response.json();\n\n        return instances;\n    }\n\n    public static async spawnNetwork(n: number): Promise<DockerInstance[]> {\n        const response = await fetch(DockerInterface.url + \"/spawnNetwork?number=\" + n);\n        const instances = await response.json();\n\n        return instances;\n    }\n\n    public static async pruneNetwork(): Promise<DockerInstance[]> {\n        const response = await fetch(DockerInterface.url + \"/pruneNetwork\");\n        const instances = await response.json();\n\n        return instances;\n    }\n\n    public static async benchmarkSimple(benchmarkName: string, transaction_count: number, peers: string[], nodecount: number): Promise<any> {\n        return new Promise<any>((resolve, reject) => {\n            fetch(DockerInterface.url + \"/benchmarkSimple\", {\n                method: \"POST\",\n                body: JSON.stringify({ benchmark_name: benchmarkName, n_transactions: transaction_count, peers: peers, nodecount: nodecount }),\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            })\n                .then(result => {\n                    if (result.status !== 200) {\n                        result.text().then(t => {\n                            reject(t);\n                        });\n                    } else {\n                        result.text().then(t => {\n                            resolve(t);\n                        });\n                    }\n                })\n                .catch(error => {\n                    reject(error);\n                });\n        });\n    }\n\n    public static async getBenchmarkFiles(): Promise<string[]> {\n        const response = await fetch(DockerInterface.url + \"/benchmarkFiles\");\n        const files = await response.json();\n\n        return files;\n    }\n\n    public static async getBenchmarkQueue(): Promise<string[]> {\n        const response = await fetch(DockerInterface.url + \"/benchmarkQueue\");\n        const benchmarks = await response.json();\n\n        return benchmarks;\n    }\n\n    public static async getBenchmarkStatus(): Promise<BenchmarkStatus> {\n        const response = await fetch(DockerInterface.url + \"/benchmarkStatus\");\n        const data = await response.json();\n\n        return data;\n    }\n\n    public static async dumpBenchmarkData(): Promise<string> {\n        const response = await fetch(DockerInterface.url + \"/dumpBenchmarkData\");\n        const data = await response.json();\n\n        return data;\n    }\n}\n","import React from \"react\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport { LabchainClient } from \"./labchainSDK/Client\";\nimport { DockerInterface } from \"./docker/DockerInterface\";\n\ninterface IState {\n    current_miner: string;\n    current_block: number;\n    current_difficulty: number;\n}\n\ninterface IProps {}\n\nexport default class StateChart extends React.Component<IProps, IState> {\n    _isMounted: Boolean = false;\n    timer: any;\n    client: LabchainClient | undefined;\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            current_miner: \"\",\n            current_block: 0,\n            current_difficulty: 0\n        };\n\n        DockerInterface.getClientInterface().then(intf => {\n            this.client = intf;\n        });\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n        this.timer = setInterval(() => {\n            this.tick();\n        }, 1000);\n    }\n\n    tick() {\n        if (!this.client) return;\n\n        this.client.getBlock().then(blocks => {\n            if (this._isMounted) {\n                if (0 === blocks.length) return;\n                let block = blocks[0];\n                this.setState({\n                    current_miner: block.creator,\n                    current_block: block.nr,\n                    current_difficulty: block.difficulty\n                });\n            }\n        });\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n        clearInterval(this.timer);\n    }\n\n    render() {\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-md-4\">Current Miner: {this.state.current_miner}</div>\n                    <div className=\"col-md-4\">Current Block: {this.state.current_block}</div>\n                    <div className=\"col-md-4\">Current Difficulty: {this.state.current_difficulty}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import { DockerInstance, DockerInterface } from \"./DockerInterface\";\n\nexport interface BenchmarkData {\n    transaction_hash: string;\n    start_time?: number;\n    end_time?: number;\n}\n\nexport default class BenchmarkEngine {\n    _receiver: DockerInstance[];\n    _filename: string;\n    _nodecount: number;\n    constructor(receiver: DockerInstance[], filename: string, nodecount: number) {\n        this._receiver = receiver;\n        this._filename = filename;\n        this._nodecount = nodecount;\n    }\n\n    /**\n     * Sends 'n' simple transactions to the receiver specified in the constructor and measures\n     * the average time until those transactions become visible in the block of a sampler.\n     * */\n    benchmarkSimpleTransactions(n: number): Promise<any> {\n        return DockerInterface.benchmarkSimple(this._filename, n, this._receiver.map(x => x.name), this._nodecount);\n    }\n}\n","import React, { useState, useEffect } from \"react\";\nimport DockerInstanceTable from \"./DockerInstanceTable\";\nimport Notifications, { notify } from \"react-notify-toast\";\nimport PruneConfirmation from \"./dialog/PruneConfirmation\";\nimport SpawnNetworkDialog from \"./dialog/SpawnDialog\";\nimport BenchmarkDialog from \"./dialog/BenchmarkDialog\";\nimport FooterComponent from \"./FooterComponent\";\nimport ApplyBenchmarkControl from \"./ApplyBenchmarkControl\";\nimport StatChart from \"./StatChart\";\nimport BenchmarkEngine from \"./docker/BenchmarkEngine\";\nimport { DockerInterface, DockerInstance } from \"./docker/DockerInterface\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.min.js\";\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n    const [dockerInstances, setDockerInstances] = useState<DockerInstance[]>([]);\n    const [showPruneConfirmation, setShowPruneConfirmation] = useState(false);\n    const [showSpawnDialog, setShowSpawnDialog] = useState(false);\n    const [showBenchmarkDialog, setShowBenchmarkDialog] = useState(false);\n    const [benchmarkId, setBenchmarkId] = useState(\"\");\n    const [benchmarkDialogErrorMessage, setBenchmarkDialogErrorMessage] = useState<string[]>([]);\n\n    let noteColor = { background: \"#0E1717\", text: \"#FFFFFF\" };\n\n    useEffect(() => {\n        DockerInterface.getInstances().then(instances => {\n            setDockerInstances(instances);\n        });\n        // eslint-disable-next-line\n    }, []);\n\n    let createNewDockerInstance = async function(evt: any) {\n        let instances = await DockerInterface.createInstance();\n        setDockerInstances(instances);\n        notify.show(\"Instance created\", \"custom\", 5000, noteColor);\n    };\n\n    let startInstance = async function(name: string) {\n        let instances = await DockerInterface.startInstance(name);\n        setDockerInstances(instances);\n        notify.show(\"Instance started\", \"custom\", 5000, noteColor);\n    };\n\n    let deleteInstance = async function(name: string) {\n        let instances = await DockerInterface.deleteInstance(name);\n        setDockerInstances(instances);\n        notify.show(\"Instance deleted\", \"custom\", 5000, noteColor);\n    };\n\n    let stopInstance = async function(name: string) {\n        let instances = await DockerInterface.stopInstance(name);\n        setDockerInstances(instances);\n        notify.show(\"Instance stopped\", \"custom\", 5000, noteColor);\n    };\n\n    let pruneNetwork = async function() {\n        setShowPruneConfirmation(false);\n        let instances = await DockerInterface.pruneNetwork();\n        setDockerInstances(instances);\n        notify.show(\"Network pruned\", \"custom\", 5000, noteColor);\n    };\n\n    let pruneNetworkDialog = async function() {\n        setShowPruneConfirmation(true);\n    };\n\n    let spawnNetworkDialog = async function() {\n        setShowSpawnDialog(true);\n    };\n\n    let spawnNetwork = async function(n: number) {\n        setShowSpawnDialog(false);\n        let instances = await DockerInterface.spawnNetwork(n);\n        setDockerInstances(instances);\n        notify.show(\"Network generated\", \"custom\", 5000, noteColor);\n    };\n\n    let startBenchmark = function(receiver: DockerInstance[], filename: string, nodecount: number) {\n        console.log(\"Start benchmark: \" + benchmarkId + \" with name: \" + filename);\n        let bc: BenchmarkEngine = new BenchmarkEngine(receiver, filename, nodecount);\n        let b: any;\n\n        switch (benchmarkId) {\n            case \"10Simple\":\n                b = bc.benchmarkSimpleTransactions(10);\n                break;\n            case \"100Simple\":\n                b = bc.benchmarkSimpleTransactions(100);\n                break;\n            case \"1000Simple\":\n                b = bc.benchmarkSimpleTransactions(1000);\n                break;\n            case \"10000Simple\":\n                b = bc.benchmarkSimpleTransactions(10000);\n                break;\n            case \"100000Simple\":\n                b = bc.benchmarkSimpleTransactions(100000);\n                break;\n        }\n\n        b.then((data: any) => {\n            console.log(\"Its done\");\n            setShowBenchmarkDialog(false);\n            setBenchmarkId(\"\");\n        }).catch((error: any) => {\n            console.log(\"Could not create benchmark\");\n            console.log(error);\n            setBenchmarkDialogErrorMessage([error]);\n        });\n    };\n\n    let sendBenchmarkTransactions = function(benchmarkType: string) {\n        setBenchmarkId(benchmarkType);\n        setShowBenchmarkDialog(true);\n    };\n\n    return (\n        <div className=\"container-fluid\">\n            <StatChart></StatChart>\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <PruneConfirmation\n                        show={showPruneConfirmation}\n                        ok={pruneNetwork}\n                        cancel={() => {\n                            setShowPruneConfirmation(false);\n                        }}\n                    ></PruneConfirmation>\n                    <SpawnNetworkDialog\n                        show={showSpawnDialog}\n                        ok={spawnNetwork}\n                        cancel={() => {\n                            setShowSpawnDialog(false);\n                        }}\n                    ></SpawnNetworkDialog>\n                    <BenchmarkDialog\n                        show={showBenchmarkDialog}\n                        errorMessage={benchmarkDialogErrorMessage}\n                        ok={startBenchmark}\n                        dockerInstances={dockerInstances}\n                        cancel={() => {\n                            setShowBenchmarkDialog(false);\n                            setBenchmarkId(\"\");\n                        }}\n                    ></BenchmarkDialog>\n                    <Notifications />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-md-10\">\n                    <h1>Labchain Composer</h1>\n                </div>\n                <div className=\"col-md-2 text-right\">\n                    <h3 className=\"counter\">#Instances: {dockerInstances.length}</h3>\n                </div>\n            </div>\n            <div className=\"row controlRow\">\n                <div className=\"col-md-2\">\n                    <button className=\"btn btn-primary\" onClick={createNewDockerInstance}>\n                        Create new Instance\n                    </button>\n                </div>\n                <div className=\"col-md-2\">\n                    <button className=\"btn btn-primary\" onClick={pruneNetworkDialog}>\n                        Prune Network...\n                    </button>\n                </div>\n                <div className=\"col-md-2\">\n                    <button className=\"btn btn-primary\" onClick={spawnNetworkDialog}>\n                        Spawn Network...\n                    </button>\n                </div>\n                <div className=\"col-md-2\">\n                    <ApplyBenchmarkControl clicked={sendBenchmarkTransactions}></ApplyBenchmarkControl>\n                </div>\n                <div className=\"col-md-2\"></div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <DockerInstanceTable\n                        instances={dockerInstances}\n                        startInstance={startInstance}\n                        stopInstance={stopInstance}\n                        deleteInstance={deleteInstance}\n                    ></DockerInstanceTable>\n                </div>\n            </div>\n            <FooterComponent></FooterComponent>\n        </div>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport { DockerInterface, DockerInstance } from \"../docker/DockerInterface\";\nimport FooterComponent from \"../FooterComponent\";\nimport \"../../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"./ConnectivityView.css\";\nimport { Graph } from \"react-d3-graph\";\nimport { LabchainClient } from \"../labchainSDK/Client\";\nimport StatChart from \"../StatChart\";\n\nexport interface GraphNode {\n    id: string;\n}\n\nexport interface GraphLink {\n    source: string;\n    target: string;\n}\n\nexport interface GraphData {\n    nodes: GraphNode[];\n    links: GraphLink[];\n}\n\ninterface IState {\n    data?: GraphData;\n}\n\ninterface IProps {}\n\nexport default class ConnectivityView extends React.Component<IProps, IState> {\n    _isMounted: Boolean = false;\n    timerID: any;\n\n    graphConfig: any = {\n        nodeHighlightBehavior: true,\n        width: 1600,\n        height: 800,\n        node: {\n            color: \"lightgreen\",\n            size: 300,\n            highlightStrokeColor: \"blue\"\n        },\n        link: {\n            highlightColor: \"blue\"\n        }\n    };\n\n    constructor(props: any) {\n        super(props);\n        this.state = { data: { nodes: [{ id: \"None\" }], links: [] } };\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n        this.timerID = setInterval(() => {\n            this.tick();\n        }, 1000);\n    }\n\n    private getNameByIP(dockerInstances: DockerInstance[], ip: string): string {\n        for (let inst of dockerInstances) {\n            if (inst.ipv4.startsWith(ip)) return inst.name;\n        }\n\n        return \"\";\n    }\n\n    private renderGraph(dockerInstances: DockerInstance[], _data: { peer: DockerInstance; peers: string[] }[]) {\n        if (_data.length === 0) return;\n\n        let nodes: GraphNode[] = [];\n        let links: GraphLink[] = [];\n\n        nodes = _data.map(d => {\n            return { id: (\" \" + d.peer.name).slice(1) };\n        });\n\n        links = _data\n            .map(d => {\n                return Object.keys(d.peers)\n                    .map(d2 => {\n                        return this.getNameByIP(dockerInstances, d2);\n                    })\n                    .filter(a => a !== d.peer.name)\n                    .map(d3 => {\n                        return { source: d.peer.name, target: d3 };\n                    });\n            })\n            .flat();\n\n        let newData = { nodes: nodes, links: links };\n\n        // the comparation might fail sometimes, but its fast and nothing bad will happen anyway\n        if (this._isMounted && JSON.stringify(this.state.data) !== JSON.stringify(newData)) this.setState({ data: newData });\n    }\n\n    tick() {\n        DockerInterface.getInstances().then(instances => {\n            let getPeersProms: Promise<{ peer: DockerInstance; peers: string[] }>[] = [];\n            DockerInterface.getClientInterfaces().then((clientInterfaces: { instance: DockerInstance; client: LabchainClient }[]) => {\n                clientInterfaces.forEach(clientI => {\n                    getPeersProms.push(\n                        new Promise((resolve, reject) => {\n                            clientI.client.getConnectedPeers().then(peers => {\n                                resolve({ peer: clientI.instance, peers: peers });\n                            });\n                        })\n                    );\n                });\n\n                Promise.all(getPeersProms).then(peerData => {\n                    this.renderGraph(instances, peerData);\n                });\n            });\n        });\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n        this._isMounted = false;\n    }\n\n    render() {\n        return (\n            <div className=\"container-fluid\">\n                <StatChart></StatChart>\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <h1>Network View</h1>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <Graph id=\"graph-id\" data={this.state.data} config={this.graphConfig}></Graph>\n                    </div>\n                </div>\n                <FooterComponent></FooterComponent>\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nexport default function BenchmarkTable(props: any) {\n    let rows: any[] = [];\n\n    props.files.forEach((file: string, i: number) => {\n        rows.push(\n            <tr key={file}>\n                <td>{i + 1}</td>\n                <td>{file}</td>\n            </tr>\n        );\n    });\n\n    return (\n        <table className=\"table table-striped\">\n            <thead>\n                <tr>\n                    <th>#</th>\n                    <th>Name</th>\n                </tr>\n            </thead>\n            <tbody>{rows}</tbody>\n        </table>\n    );\n}\n","import React from \"react\";\n\nexport default function BenchmarkBatchTable(props: any) {\n    let rows: any[] = [];\n\n    props.benchmarks.forEach((file: string, i: number) => {\n        rows.push(\n            <tr key={file}>\n                <td>{i + 1}</td>\n                <td>{file}</td>\n            </tr>\n        );\n    });\n\n    return (\n        <table className=\"table table-striped\">\n            <thead>\n                <tr>\n                    <th>#</th>\n                    <th>Name</th>\n                </tr>\n            </thead>\n            <tbody>{rows}</tbody>\n        </table>\n    );\n}\n","import React from \"react\";\nimport BenchmarkTable from \"./BenchmarkTable\";\nimport BenchmarkBatchTable from \"./BenchmarkBatchTable\";\nimport FooterComponent from \"../FooterComponent\";\nimport { DockerInterface, BenchmarkStatus } from \"../docker/DockerInterface\";\nimport \"./BenchmarkView.css\";\n\ninterface IState {\n    files: string[];\n    benchmarkQueue: string[];\n    benchmarkStatus: BenchmarkStatus;\n}\n\ninterface IProps {}\n\nexport default class BenchmarkView extends React.Component<IProps, IState> {\n    _isMounted: Boolean = false;\n    timerID: any;\n\n    constructor(props: any) {\n        super(props);\n        this.state = { files: [], benchmarkQueue: [], benchmarkStatus: { name: \"\", remaining_txs: 0, found_txs: 0, total_txs: 0 } };\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n        this.timerID = setInterval(() => {\n            this.tick();\n        }, 1000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n        this._isMounted = false;\n    }\n\n    tick() {\n        DockerInterface.getBenchmarkFiles().then(_files => {\n            DockerInterface.getBenchmarkStatus().then(_status => {\n                DockerInterface.getBenchmarkQueue().then(_queue => {\n                    console.log(\"Received benchmark status\");\n                    console.log(_status);\n                    this.setState({ files: _files, benchmarkQueue: _queue, benchmarkStatus: _status });\n                });\n            });\n        });\n    }\n\n    dumpBenchmarkData() {\n        DockerInterface.dumpBenchmarkData().then(res => {});\n    }\n\n    render() {\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <h1>Benchmark Overview</h1>\n                    </div>\n                </div>\n                {this.state.benchmarkStatus.name !== \"\" && (\n                    <div className=\"row\">\n                        <div className=\"col-md-6\">\n                            <h4>\n                                Active Benchmark <b>{this.state.benchmarkStatus.name}</b> Remaining transactions to analyse:\n                            </h4>\n                        </div>\n                        <div className=\"col-md-1\">\n                            <h4>\n                                {this.state.benchmarkStatus.found_txs}/{this.state.benchmarkStatus.total_txs}\n                            </h4>\n                        </div>\n                        <div className=\"col-md-5\">\n                            <button className=\"btn btn-primary\" onClick={this.dumpBenchmarkData}>\n                                Dump current benchmark data\n                            </button>\n                        </div>\n                    </div>\n                )}\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <h3>Benchmark Batch Queue</h3>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <BenchmarkBatchTable benchmarks={this.state.benchmarkQueue}></BenchmarkBatchTable>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <h3>Benchmark Files</h3>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-12 benchmarkTable\">\n                        <BenchmarkTable files={this.state.files}></BenchmarkTable>\n                    </div>\n                </div>\n                <FooterComponent></FooterComponent>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\nimport App from \"./App\";\nimport ConnectivityView from \"./network/ConnectivityView\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport BenchmarkView from \"./benchmark/BenchmarkView\";\n\nconst routing = (\n    <Router>\n        <div>\n            <Route exact path=\"/\" component={App} />\n            <Route path=\"/network\" component={ConnectivityView} />\n            <Route path=\"/benchmarks\" component={BenchmarkView} />\n        </div>\n    </Router>\n);\n\nReactDOM.render(routing, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}